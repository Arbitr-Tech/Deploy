spring:
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_EXTERNAL_PORT}/${POSTGRES_DB}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: create-drop
    database: postgresql

  kafka:
    bootstrap-servers: ${EXTERNAL_HOST}:${KAFKA_EXTERNAL_HOST_PORT}
    consumer:
      enable-auto-commit: true
      auto-offset-reset: earliest
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: '*'
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

  mail:
    host: ${SMTP_HOST}
    port: ${SMTP_PORT}
    username: ${SMTP_USER}
    password: ${SMTP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: ${MAIL_SMTP_AUTH:false}
          starttls:
            enable: ${MAIL_SMTP_STARTTLS_ENABLE:false}

mail:
  domain: "https://arbitr.ru/"
  notification-sender: "no-reply@arbitr.ru"
  max_retries: 3
  retry_interval: 60000

kafka:
  email-topic: emails
  email-topic-processor-group: email-group

minio:
  endpoint: ${MINIO_HOST}:${MINIO_API_PORT}
  access-key: ${MINIO_ROOT_USER}
  secret-key: ${MINIO_ROOT_PASSWORD}
  bucket-name: ${MINIO_BUCKET_NAME}

jwt:
  secret-key: ${JWT_SECRET_KEY}
  access-token:
    expiration: ${ACCESS_TOKEN_EXPIRATION}
  refresh-token:
    expiration: ${REFRESH_TOKEN_EXPIRATION}

frontend:
  recovery-password:
    url: "https://random.site.net/password-reset/"
    expiration-minutes: 15

debug: true